import numpy as npfrom numpy import linalg as LAimport matplotlib.pyplot as plt'''Perform the following numerical experiments for random lower triangu-lar matrices. Here, we define a random matrix to be a m×m matrix whose entries areindependent random numbers from real normal distribution with mean zero and stan-dard deviation √m. In each of the following items, you must repeat the experimentfor at least 100 different random matrices to collect the statistical information.(1) Compute the p−norm, with p = 1, 2, and infinite norm (you may use the normfunction in matlab or other software package), for the random matrices with sizesm = 100, 200, 300, · · · . For each of the random matrices, compute the ratiosbetween 1-norm and 2-norm if your GT ID# is an even number. Find out how those quantitiesbehave as m → ∞.(2) Compute the 2-norm condition number for the random matrices with size m =100, 200, 300, · · · , and find out its behavior as m → ∞.'''m_test = [100,200,300, ]m = 3 # Matrix sizedef calc_norms(m):    randMat = np.random.normal(loc=0, scale=m**0.5, size=(m,m))    tri = np.tril(randMat, -1) # lower triangularize (?)    return [LA.norm(tri, 1), LA.norm(tri, 2), LA.norm(tri, np.inf)]# LA.cond(tri, 2)]s = 100 # samplingresult_mat = np.zeros((len(m_test),3, s)) # norm1, norm2, norminf, condno        for n, m in enumerate(m_test):    for i in range(s):        result_mat[n, :, i] = calc_norms(m)# Now, plot the boxplots for each normfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 5))labels = ['100', '200', '300']for i, ax, title in zip(range(3), axes, ['1-Norm', '2-Norm', 'Inf-Norm']):    data_to_plot = [result_mat[j, i, :] for j in range(len(m_test))]    ax.boxplot(data_to_plot)    ax.set_xticklabels(labels)    ax.set_title(title)    ax.set_xlabel('Matrix Size m')    if i == 0:        ax.set_ylabel('Norm Value')plt.tight_layout()plt.show()